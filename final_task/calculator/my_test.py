import unittest
import math
from calculator.calculation import evaluated
from math import e, pi, cos, sin, log


class TestCalc(unittest.TestCase):

    def test_errors(self):
        self.assertRaises(SystemExit, evaluated, 'acosh(0.54)')
        self.assertRaises(SystemExit, evaluated, 'acos(10)')
        self.assertRaises(SystemExit, evaluated, 'asin(5)')
        self.assertRaises(SystemExit, evaluated, 'atan2(5,4,3)')
        self.assertRaises(SystemExit, evaluated, 'atan2(5)')
        self.assertRaises(SystemExit, evaluated, 'atanh(5)')
        self.assertRaises(SystemExit, evaluated, 'sqrt(-4)')
        self.assertRaises(SystemExit, evaluated, '2/0')
        self.assertRaises(SystemExit, evaluated, '')
        self.assertRaises(SystemExit, evaluated, '+')
        self.assertRaises(SystemExit, evaluated, '1-')
        self.assertRaises(SystemExit, evaluated, '1 2')
        self.assertRaises(SystemExit, evaluated, '==7')
        self.assertRaises(SystemExit, evaluated, '1 + 2(3 * 4))')
        self.assertRaises(SystemExit, evaluated, '((1+2)')
        self.assertRaises(SystemExit, evaluated, '1 + 1 2 3 4 5 6')
        self.assertRaises(SystemExit, evaluated, 'log100(100)')
        self.assertRaises(SystemExit, evaluated, '------')
        self.assertRaises(SystemExit, evaluated, '5 > = 6')
        self.assertRaises(SystemExit, evaluated, '5 / / 6')
        self.assertRaises(SystemExit, evaluated, '6 < = 6')
        self.assertRaises(SystemExit, evaluated, '6 * * 6')
        self.assertRaises(SystemExit, evaluated, '(((((')
        self.assertRaises(SystemExit, evaluated, 'abs')
        self.assertRaises(SystemExit, evaluated, 'pow(2, 3, 4)')
        self.assertRaises(SystemExit, evaluated, '1.2.3 + 5')
        self.assertRaises(SystemExit, evaluated, 'qwerty()', ['not_exist_module'])

    def test_unary_signs(self):
        self.assertEqual(evaluated('----1'), 1)
        self.assertEqual(evaluated('-+-+5'), 5)
        self.assertEqual(evaluated('-+-+-2'), -2)
        self.assertEqual(evaluated('---+1+--4'), 3)
        self.assertEqual(evaluated('-+++--55++-+45'), -100)
        self.assertEqual(evaluated('---++++++++---1'), 1)
        self.assertEqual(evaluated('++++++-++-++++-1'), -1)
        self.assertEqual(evaluated('-(100+-20)'), -80)
        self.assertEqual(evaluated('15--(-5)'), 10)
        self.assertEqual(evaluated('-.15'), -.15)
        self.assertEqual(evaluated('--.15'), .15)
        self.assertEqual(evaluated('+-+.15--.5'), .35)
        self.assertEqual(evaluated('1---1'), 0)
        self.assertEqual(evaluated('6-(-13)'), 19)
        self.assertEqual(evaluated('-+---+-1'), -1)
        self.assertEqual(evaluated('-2^2'), 4)

    def test_comparison(self):
        self.assertTrue(evaluated('1+2*4/3+1!=1+2*4/3+2'))
        self.assertTrue(evaluated('e==e'))
        self.assertTrue(evaluated('pi!=e'))
        self.assertTrue(evaluated('e^2>pi/2^2'))
        self.assertTrue(evaluated('11<=11'))
        self.assertTrue(evaluated('2^2*2==2^3'))
        self.assertTrue(evaluated('sin(0)!=cos(0)'))
        self.assertTrue(evaluated('sin(pi/2)==cos(0)'))
        self.assertTrue(evaluated('log10(100)>=2'))
        self.assertTrue(evaluated('log(e)<=1'))
        self.assertTrue(evaluated('sin(0)+5^2-3/3^.0==e^0+42/2'))
        self.assertTrue(evaluated('2==2==2!=3'))
        self.assertFalse(evaluated('5<=2'))
        self.assertFalse(evaluated('2^2>2^3'))
        self.assertFalse(evaluated('log10(100)>e'))
        self.assertFalse(evaluated('pi==e'))
        self.assertFalse(evaluated('sin(0/pi)+1!=cos(0)'))
        self.assertFalse(evaluated('e^5>=e^5+1'))
        self.assertFalse(evaluated('0!=0'))
        self.assertFalse(evaluated('0<0'))
        self.assertFalse(evaluated('1>=2'))
        self.assertFalse(evaluated('sin(0)+5^2-3/3^.0>e^0+42/2'))
        self.assertFalse(evaluated('sin(0)+5^2-3/3^.0==e^0+42/2-sin(0)+2'))
        self.assertFalse(evaluated('2==2==3'))

    def test_result(self):
        self.assertEqual(evaluated('7*2^4'), 7*2**4)
        self.assertEqual(evaluated('1+2*2'), 1+2*2)
        self.assertEqual(evaluated('1+(2+3*2)*3'), 1+(2+3*2)*3)
        self.assertEqual(evaluated('10*(2+1)'), 10*(2+1))
        self.assertEqual(evaluated('10^(2+1)'), 10**(2+1))
        self.assertEqual(evaluated('100/3^2'), 100/3**2)
        self.assertEqual(evaluated('100/3%2^2'), 100/3 % 2**2)
        self.assertEqual(evaluated('round(123.4567890)'), round(123.4567890))
        self.assertEqual(evaluated('abs(-5)'), abs(-5))
        self.assertEqual(evaluated('102%12%7'), 102 % 12 % 7)
        self.assertEqual(evaluated('100/4/3'), 100/4/3)
        self.assertEqual(evaluated('2^3^4'), 2**3**4)
        self.assertEqual(evaluated('(100)'), (100))
        self.assertEqual(evaluated('666'), 666)
        self.assertEqual(evaluated('1/3'), 1/3)
        self.assertEqual(evaluated('1.0/3.0'), 1.0/3.0)
        self.assertEqual(evaluated('.1 * 2.0^56.0'), .1 * 2.0**56.0)
        self.assertEqual(evaluated('e^34'), e**34)
        self.assertEqual(evaluated('(2.0^(pi/pi+e/e+2.0^0.0))'), (2.0**(pi/pi+e/e+2.0**0.0)))
        self.assertEqual(evaluated('(2.0^(pi/pi+e/e+2.0^0.0))^(1.0/3.0)'),
                                  ((2.0**(pi/pi+e/e+2.0**0.0))**(1.0/3.0)))
        self.assertEqual(evaluated('sin(pi/2^1) + log(1*4+2^2+1, 3^2)'),
                                  (sin(pi/2**1) + log(1*4+2**2+1, 3**2)))
        self.assertEqual(evaluated('10*e^0*log10(.4 -5/ -0.1-10) - -abs(-53/10) + -5'),
                                  (10*e**0*math.log10(.4 - 5 / -0.1-10) - -abs(-53/10) + -5))
        self.assertEqual(evaluated('2.0^(2.0^2.0*2.0^2.0)'), 2.0**(2.0**2.0*2.0**2.0))
        self.assertEqual(evaluated('sin(e^log(e^e^sin(23.0),45.0) + cos(3.0+log10(e^-e)))'),
                                  (sin(e**log(e**e**sin(23.0), 45.0) + cos(3.0+math.log10(e**-e)))))
        self.assertEqual(evaluated('sin(pi/2)^2+1'), sin(pi/2)**2+1)
        self.assertEqual(evaluated('sin(90)'), sin(90))
        self.assertEqual(evaluated('factorial(5)'), math.factorial(5))
        self.assertEqual(evaluated('radians(50)'), math.radians(50))
        self.assertEqual(evaluated('gamma(5)'), math.gamma(5))
        self.assertEqual(evaluated('12^2-12^2+1'), 12**2-12**2+1)
        self.assertEqual(evaluated('-16/-16'), -16/-16)
        self.assertEqual(evaluated('0.9/3'), 0.9/3)
        self.assertEqual(evaluated('.9/3'), .9/3)
        self.assertEqual(evaluated('-.9/3'), -.9/3)
        self.assertEqual(evaluated('-24-(-10)'), -24-(-10))
        self.assertEqual(evaluated('2^2^2^2'), 2**2**2**2)
        self.assertEqual(evaluated('log2(10)'), math.log2(10))
        self.assertEqual(evaluated('log1p(10)'), math.log1p(10))
        self.assertEqual(evaluated('acos(0.54)'), math.acos(0.54))
        self.assertEqual(evaluated('acosh(5)'), math.acosh(5))
        self.assertEqual(evaluated('asin(0.5)'), math.asin(0.5))
        self.assertEqual(evaluated('asinh(-10)'), math.asinh(-10))
        self.assertEqual(evaluated('atan(2)'), math.atan(2))
        self.assertEqual(evaluated('atan2(5,4)'), math.atan2(5, 4))
        self.assertEqual(evaluated('atanh(0.654)'), math.atanh(0.654))
        self.assertEqual(evaluated('ceil(5.6)'), math.ceil(5.6))
        self.assertEqual(evaluated('sqrt(2^2)'), math.sqrt(2**2))
        self.assertEqual(evaluated('sqrt(0.64)'), math.sqrt(0.64))
        self.assertEqual(evaluated('copysign(-1.0, 5)'), 1.0)
        self.assertEqual(evaluated('copysign(-1.0, -5)'), -1.0)
        self.assertEqual(evaluated('cos(0.6321)'), cos(0.6321))
        self.assertEqual(evaluated('cosh(0)'), 1)
        self.assertEqual(evaluated('degrees(2)'), math.degrees(2))
        self.assertEqual(evaluated('-sin(4)+-cos(2)*3/-4*(-4)'), -sin(4)+-cos(2)*3/-4*(-4))
        self.assertEqual(evaluated('e^e/e'), e**e/e)
        self.assertEqual(evaluated('erf(0.5)'), math.erf(0.5))
        self.assertEqual(evaluated('erfc(0)'), 1)
        self.assertEqual(evaluated('exp(10)'), math.exp(10))
        self.assertEqual(evaluated('expm1(2)'), math.expm1(2))
        self.assertEqual(evaluated('fabs(-0.52)'), math.fabs(-0.52))
        self.assertEqual(evaluated('fmod(5.5,3.1)'), math.fmod(5.5, 3.1))
        self.assertEqual(evaluated('frexp(5)'), math.frexp(5))
        self.assertEqual(evaluated('sin(e+pi)^2-cos(pi^2+1)'), sin(e+pi)**2-cos(pi**2+1))
        self.assertEqual(evaluated('sin(pi)+cos(pi)/sin(pi/2)*3--e+pi*e^sin(e+1)/-pi'),
                                  (sin(pi)+cos(pi)/sin(pi/2)*3--e+pi*e**sin(e+1)/-pi))
        self.assertEqual(evaluated('(-e/-+1)*((((-sin(pi*(-cos(pi^2))+-e)/2)/1)^.0)+11)'),
                                  (-e/-+1)*((((-sin(pi*(-cos(pi**2))+-e)/2)/1)**.0)+11))
